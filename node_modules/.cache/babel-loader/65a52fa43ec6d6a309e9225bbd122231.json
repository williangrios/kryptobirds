{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ITAUTEC\\\\Desktop\\\\SOLIDITY\\\\CURSO NFT MINTER\\\\nft-marketplace-starter-kit-main\\\\src\\\\components\\\\App.js\";\n//importando tudo na mão\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBirdz from \"../abis/KryptoBirdz.json\"; //extends\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    //método para executar o método loadWeb3\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //método para conectar com a wallet\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                //tratando a conexão\n                if (provider) {\n                  console.log('Ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('No Ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, KryptoBird;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                networkId = web3.eth.net.getId();\n                networkData = KryptoBirdz.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                abi = KryptoBirdz.abi;\n                address = networkData.address;\n                contract = new web3.et.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(this.state.contract);\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.KryptoBird(i - 1).call();\n\n              case 22:\n                KryptoBird = _context3.sent;\n                this.setState({\n                  kryptobirdz: [].concat(_toConsumableArray(this.state.kryptobirdz), [KryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                console.log(this.state.kryptobirdz);\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('Smart contract not deployed');\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptobird) {\n      _this.state.contract.methods.mint(kryptobird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          kryptobirdz: [].concat(_toConsumableArray(_this.state.kryptobirdz), [KryptoBirdz])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptobirdz: []\n    };\n    return _this;\n  } //render \n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \" KryptoBirdz NFTs \"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"conteiner-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \" KryptoBirdz - NFT Tokens\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var kryptobird = _this2.kryptoBird.value;\n\n          _this2.mint(kryptobird);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          margin: '6px'\n        },\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      })))))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //exportar a classe App\n\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\ITAUTEC\\Desktop\\SOLIDITY\\CURSO NFT MINTER\\nft-marketplace-starter-kit-main\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBirdz","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","state","networkId","net","getId","networkData","networks","abi","address","contract","et","Contract","methods","totalSupply","call","i","KryptoBird","kryptobirdz","alert","props","mint","kryptobird","send","from","once","receipt","color","opacity","event","preventDefault","kryptoBird","value","input","margin"],"mappings":"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","sourcesContent":["//importando tudo na mão\r\nimport React, {Component} from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBirdz from \"../abis/KryptoBirdz.json\";\r\n\r\n\r\n//extends\r\nclass App extends Component{\r\n\r\n    //método para executar o método loadWeb3\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n\r\n    //método para conectar com a wallet\r\n    async loadWeb3(){\r\n\r\n        //conexão com a wallet por meio da detectEtheerumProvider()\r\n        const provider = await detectEthereumProvider();\r\n\r\n        //tratando a conexão\r\n        if (provider) {\r\n            console.log('Ethereum wallet is connected');\r\n            window.web3 = new Web3(provider);\r\n        }\r\n        else {\r\n            console.log('No Ethereum wallet detected');\r\n        }\r\n\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3;\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({account:accounts});\r\n        console.log(this.state.account);\r\n\r\n        const networkId = web3.eth.net.getId();\r\n        const networkData = KryptoBirdz.networks[networkId];\r\n\r\n        if (networkData) {\r\n            const abi = KryptoBirdz.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.et.Contract(abi, address);\r\n            this.setState({contract});\r\n            console.log(this.state.contract);\r\n            const totalSupply = await contract.methods.totalSupply().call();\r\n            this.setState({totalSupply});\r\n\r\n            for(let i = 1; i <= totalSupply ; i++) {\r\n                const KryptoBird = await contract.methods.KryptoBird(i-1).call();\r\n                this.setState({\r\n                    kryptobirdz: [...this.state.kryptobirdz, KryptoBird]\r\n                })\r\n            }\r\n\r\n            console.log(this.state.kryptobirdz);\r\n\r\n        }\r\n        else{\r\n            window.alert('Smart contract not deployed');\r\n        }\r\n\r\n    }\r\n\r\n    mint = (kryptobird) => {\r\n        this.state.contract.methods.mint(kryptobird).send({from: this.state.account})\r\n        .once('receipt', (receipt) => {\r\n            this.setState({\r\n                kryptobirdz: [...this.state.kryptobirdz, KryptoBirdz]\r\n            })\r\n        })\r\n    }\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply: 0,\r\n            kryptobirdz: []\r\n        }\r\n    }\r\n\r\n    //render \r\n    render(){\r\n        return(\r\n            <div>\r\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\r\n                    <div className='navbar-brand col-sm-3 col-md-3 mr-0'\r\n                        style={{color:'white'}}> KryptoBirdz NFTs </div>\r\n\r\n                <ul className='navbar-nav px-3'>\r\n                    <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\r\n                        <small className='text-white'>\r\n                            {this.state.account}\r\n                        </small>\r\n                    </li>\r\n\r\n                </ul>\r\n                </nav>\r\n\r\n                <div className='conteiner-fluid mt-1'>\r\n                    <div className='row'>\r\n                        <main role='main' className='col-lg-12 d-flex text-center'>\r\n                            <div className='content mr-auto ml-auto' style={{opacity:'0.8'}}>\r\n                                <h1 style={{color:'white'}}> KryptoBirdz - NFT Tokens</h1>\r\n                                <form onSubmit={(event)=> {\r\n                                    event.preventDefault();\r\n                                    const kryptobird = this.kryptoBird.value;\r\n                                    this.mint(kryptobird);\r\n                                }}>\r\n                                    <input type='text' placeholder='Add a file location' className='form-control mb-1' ref={(input) => this.kryptoBird = input}/>\r\n                                    <input style={{margin:'6px'}} type='submit' className='btn btn-primary btn-black' value='MINT'/>\r\n                                </form>\r\n\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n//exportar a classe App\r\nexport default App;"]},"metadata":{},"sourceType":"module"}